# -*- coding: utf-8 -*-
# title: Conventions d'Ã©criture du wiki
# author: Erick Gallesio
# creation date: 31-May-2018 19:26
# Last file update: 31-May-2018 19:28 (eg)


! Introduction

Dans un Wiki, ce que l'on veut, c'est pouvoir crÃ©er des pages de texte
sans Ãªtre un spÃ©cialiste d'HTML. Pour cela, le contenu du Wiki est
constituÃ© de pages de texte brut enrichi d'un certain nombre de
caractÃ¨res supplÃ©mentaires qui permettent d'indiquer la mise en forme
du texte, de crÃ©er des liens, de disposer des images, etc. Les rÃ¨gles
de mise en forme du texte ont Ã©tÃ©s conÃ§ues pour que les
fonctionnalitÃ©s les plus courantes soient faciles Ã  taper (et Ã
analyser pour notre programme Python). Ces conventions d'Ã©criture sont
dÃ©crites ci-dessous.

~~Note:~~ Pour bien comprendre, il peut Ãªtre utile de consulter le
texte source de cet article qui est disponible
[articles/Conventions%%Ecriture @ ici]


! Conventions typographiques de base

Notre Wiki permet d'avoir des mots en **gras**, en ~~italique~~ ou
__soulignÃ©s__ (voire on veut pouvoir avoir des mots en
**__~~gras, italique et soulignÃ©s~~__**).

Attention on peut **avoir** plusieurs **mots** en **gras** par **ligne**
(cela veut dire qu'il faut faire un peu attention dans ses expressions
rÃ©guliÃ¨res).

**Conventions:**
LIST{
  # Pour mettre en gras entourer la zone de deux '*': **gras**

  # Pour mettre en italique entourer la zone de deux '~': ~~italique~~

  # Pour souligner entourer la zone de deux '_': __soulignÃ©__

  # Pour marquer une texte comme important, entourer de deux '$': $$Alerte!!$$

  # Une ligne complÃ¨tement vide introduit un paragraphe

  # On peut aussi mettre une ligne de sÃ©paration avec au moins 4
  caractÃ¨res '=' sur une ligne seule:
  ========
  comme on peut le voir ci-dessus.

  # Les liens inter-pages se font grÃ¢ce Ã  la syntaxe CamelCase

  # Notre Wiki accepte aussi des lignes commentaires (qui n'apparaissent
  donc pas dans la page HTML produite). Une ligne commentaire, est une
  ligne dont le premier caractÃ¨re est un diÃ¨se '#'.

  # A l'inverse, les lignes qui commencent par un '%' en dÃ©but de
    lignes doivent Ãªtre laissÃ©es telles quelles. Cela permet de
    "tricher" et de mettre un peu d'HTML quand on en a besoin.
    A priori, cela ne devrait pas souvent vous servir.

  # ~~DerniÃ¨re convention~~: une suite de deux caractÃ¨res '%' successifs
  doit disparaÃ®tre dans la version HTML. Cela permet de changer la
  signification des caractÃ¨res spÃ©ciaux. Par exemple pour afficher
  quatre '=' successifs sans qu'ils soient interprÃ©tÃ©s comme une ligne
  des sÃ©paration, on peut taper 2 '=' suivis de 2 '%' en enfin de 2
  '='. C'est aussi utile pour Ã©crire du **Camel%%Case** quand on ne veut
  pas aller sur la page CamelCase.
}

# ====================
! URLs & Images
# ====================
{images/Baby%%Linux.png}
Les URLs se mettent entre crochets, par exemple:
  [http://www.google.fr]
ou encore (si on glisse un ' @ ' entre l'URL et son titre):
  [http://www.google.fr @ Google France].

De mÃªme on peut aussi mettre facilement une image dans une page en
entourant son URL entre accolades.

# #####################################################################
! Sections
# #####################################################################
Une section est dÃ©notÃ©e par le caractÃ¨re "!" en dÃ©but de ligne.  Une
sous-section, quant Ã  elle, est introduite par le caractÃ¨re '!!' en
dÃ©but de ligne. Un exemple de sous section est donnÃ© ci-dessous.

# --------------------
!! Sous-section
# --------------------
Cette sous-section dÃ©crit comment faire des listes d'items avec notre Wiki:

Une liste d'items:
LIST{
    # Un item est entrÃ© avec le caractÃ¨re '#'
    # On peut avoir plusieurs niveaux
    LIST{
      # Cet item est au niveau 2
      # Pour que ce soit plus lisible, il peut y avoir des espaces ou
      des tabulations devant le '#'
    }
    # Eventuellement les liste peuvent Ãªtre numÃ©rotÃ©es
    LIST[
      # un
      # deux
      # trois
    ]
    # C'est pas gÃ©nial mais Ã§a marche.
    # Pour savoir comment entrer des liste regarder le
      [articles/Conventions%%Ecriture @ texte source] de la page courante
}

# --------------------
!! Comment s'y prendre?
# --------------------

Pour rÃ©aliser la mise en forme de vote texte (cÃ d pour passer de la
forme texte Ã  la forme HTML, il faudra utiliser la fonction Python
**regsub**. Cette fonction permet de faire des remplacements dans une
chaÃ®ne de caractÃ¨res. Elle prend 3 paramÃ¨tres:
LIST{
  # une expression rÃ©guliÃ¨re de rechercher
  # la chaÃ®ne par laquelle on veut remplacer
  # la chaÃ®ne sur laquelle on travaille
}

Un exemple d'utilisation de cette fonction est montrÃ© ci-dessous
pour le texte <foo> && <bar> (qui doit apparaÃ®tre ici)

%<div style="font-weight: bold"><pre>
balico$ python3
Python 3.4.3+ (default, May  7 2015, 23:10:14)
Type "help", "copyright", "credits" or "license" for more information.
>>> from peip3 import *
>>> line = "<foo> et <bar>"
>>> line = regsub('<', '&lt;', line)
>>> line = regsub('>', '&gt;', line)
>>> print(line)
&lt;foo&gt; et &lt;bar&gt;
%</pre></div>

Ici on remplace les caractÃ¨res '<' et '>' par les entitÃ©s '&lt;' et
'&gt;' comme le requiert HTML. De la mÃªme faÃ§on le caractÃ¨re '&' doit
Ãªtre remplacÃ© par l'entitÃ© '&amp;' en HTML. Cette substitution est
laissÃ©e en exercice.

Toutes les substitutions se font de la mÃªme faÃ§on, mais il y en a
certianes qui sont plus faciles que d'autres. N'attaquez pas tout
ensemble, mais traitez chaque cas les un aprÃ¨s les autres. Voila en
gros l'ordre de difficultÃ©:

LIST{
   # Les caractÃ¨res '&', '<' et '>', mais ce qui est dit plus haut
   doit pas mal vous aider.
   # La suite de 2 '%' qui doit disparaÃ®tre
   # ligne de sÃ©paration (4 '=', au moins, successifs)
   # paragraphe
   # listes numÃ©rotÃ©s ou non
   # section et sous section
   # $$marques$$, **gras**, __soulignÃ©__ et ~~italique~~
   # Syntaxe CamelCase
   # Images et  URLs
}

**Bon courage**
